package array;

/**
 * 这道题的关键是，为什么要使用双指针？
 * 1 什么是双指针？
 * 1快指针要做一件事， 2慢指针要做另外一件事。 3当快指针触发了某个条件的时候，有一段涉及慢指针的逻辑
 * 1快指针向后遍历，寻找为非0的元素 2慢指针将指向的元素赋值为0（快指针找到全部非0元素后） 3快指针找到为非0的元素，就将元素赋值给慢指针指向的元素，并且带动慢指针前进1步（一般情况下，慢指针不具备自己向后遍历的能力）
 * 2 本题为什么要使用双指针？
 * 不复制数组 ，原地对数组进行操作。代表这要使用指针。
 * 3 读懂代码？
 */
public class leetcode283 {

    public void moveZeros(int[] nums) {
        //设置一个变量，用来指向经过一系列操作后数组中所有为0元素的第一个位置上
        //一开始默认在索引为0的位置
        int slow = 0;

        //从头到尾遍历数组
        //遍历完毕之后，slow指向了一个为0的元素，或者如果数组中不存在0，就和fast一样，超过了数组的范围
        for (int fast = 0; fast < nums.length; fast++) {

            //在遍历过程中，如果发现访问的元素是非0元素
            //说明slow不在正确的位置上，需要向后移动，寻找合适的位置
            if (nums[fast] != 0) {

                //这个时候，原先slow的值需要被fast的值覆盖
                nums[slow] = nums[fast];

                //slow需要向后移动，寻找合适的位置
                slow++;

            }

        }

        //接下来，只需要把slow极其后面所有的元素都设置为0就行
        for (int i = slow; i < nums.length; i++) {
            //都设置为0
            nums[i] = 0;
        }


    }
}
